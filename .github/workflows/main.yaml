name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Publish Docker Image Locally
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Read version
        id: get_version
        run: |
          VERSION=$(cat src/version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.DOCKER_USERNAME }}/fastapi:${{ steps.get_version.outputs.VERSION }} .

      - name: Save Docker Image as Artifact
        run: |
          docker save ${{ vars.DOCKER_USERNAME }}/fastapi:${{ steps.get_version.outputs.VERSION }} -o fastapi_image.tar
        # Compress the image to save space
      - name: Compress Docker Image
        run: gzip fastapi_image.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fastapi_image
          path: fastapi_image.tar.gz

  test:
    name: Test Docker Image Health v${{ needs.build.outputs.VERSION }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi_image
          path: .

      - name: Unpack Docker Image
        run: gunzip fastapi_image.tar.gz

      - name: Load Docker Image
        run: docker load -i fastapi_image.tar

      - name: Run Docker Container
        run: |
          docker run -d -p 8080:80 --name fastapi ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
          sleep 10

      - name: Test Health Endpoint
        run: |
          curl -f http://localhost:8080/health

      - name: Stop Docker Container
        run: |
          docker stop fastapi
          docker rm fastapi

  security_scan:
    name: Security Scan v${{ needs.build.outputs.VERSION }}
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() }}

    steps:
        - name: Download Docker Image Artifact
          uses: actions/download-artifact@v4
          with:
            name: fastapi_image
            path: .

        - name: Unpack Docker Image
          run: gunzip fastapi_image.tar.gz

        - name: Load Docker Image
          run: docker load -i fastapi_image.tar

        # # Cache Trivy vulnerability database
        # - name: Cache Trivy DB
        #   uses: actions/cache@v3
        #   with:
        #     path: ~/.cache/trivy/db
        #     key: ${{ runner.os }}-trivy-db-cache

        # - name: Run Trivy Vulnerability Scanner
        #   uses: aquasecurity/trivy-action@0.28.0
        #   with:
        #     format: 'table'
        #     exit-code: '1'
        #     ignore-unfixed: true
        #     vuln-type: 'os,library'
        #     severity: 'CRITICAL,HIGH'
        #     image-ref: ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
        #   env:
        #     # Specify cache directory and skip DB updates if the cache is hit
        #     TRIVY_CACHE_DIR: ~/.cache/trivy
        #     # args: "--skip-db-update"

        # - name: Scan Image with Grype
        #   uses: anchore/grype-action@v1
        #   with:
        #     image: ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
            
        - name: Run Clair Scan
          run: |
            docker run -d --name clair --network host https://github.com/quay/clair
            sleep 10
            docker run --rm --network host -v /var/run/docker.sock:/var/run/docker.sock arminc/clair-scanner:latest ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}


  push:
    name: Push Docker Image to DockerHub v${{ needs.build.outputs.VERSION }}
    runs-on: ubuntu-latest
    needs: [build, test, security_scan]
    if: ${{ success() }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker Image
        run: |
          docker tag ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }} ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
          docker push ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
