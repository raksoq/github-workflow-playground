name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Publish Docker Image Locally
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Read version
        id: get_version
        run: |
          VERSION=$(cat src/version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.DOCKER_USERNAME }}/fastapi:${{ steps.get_version.outputs.VERSION }} .

      - name: Save Docker Image as Artifact
        run: |
          docker save ${{ vars.DOCKER_USERNAME }}/fastapi:${{ steps.get_version.outputs.VERSION }} -o fastapi_image.tar
        # Compress the image to save space
      - name: Compress Docker Image
        run: gzip fastapi_image.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fastapi_image
          path: fastapi_image.tar.gz

  test:
    name: Test Docker Image Health v${{ needs.build.outputs.VERSION }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi_image
          path: .

      - name: Unpack Docker Image
        run: gunzip fastapi_image.tar.gz

      - name: Load Docker Image
        run: docker load -i fastapi_image.tar

      - name: Run Docker Container
        run: |
          docker run -d -p 8080:80 --name fastapi ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
          sleep 10

      - name: Test Health Endpoint
        run: |
          curl -f http://localhost:8080/health

      - name: Stop Docker Container
        run: |
          docker stop fastapi
          docker rm fastapi

  
  security_scan:
    name: Security Scan v${{ needs.build.outputs.VERSION }}
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() }}

    steps:
        - name: Download Docker Image Artifact
          uses: actions/download-artifact@v4
          with:
            name: fastapi_image
            path: .

        - name: Unpack Docker Image
          run: gunzip fastapi_image.tar.gz

        - name: Load Docker Image
          run: docker load -i fastapi_image.tar

        # Trivy Scan
        # - name: Run Trivy Security Scan
        #   uses: aquasecurity/trivy-action@v0.4.3
        #   with:
        #     image-ref: user/app:latest
        #     format: sarif
        #     output: trivy_results.sarif

        # Anchore Scan
        - name: Run Anchore Security Scan
          uses: anchore/scan-action@v3
          with:
            image:  ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
            format: sarif
            output-format: sarif
            fail-build: true

        # Orca Security Scan
        - name: Run Orca Security Scan
          uses: orcasecurity/shiftleft-container-image-action@v1
          with:
            api_token: ${{ secrets.ORCA_SECURITY_API_TOKEN }}
            image:  ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
            format: sarif
            output: orca_results.sarif

        # Prisma Cloud Scan
        - name: Run Prisma Cloud Scan
          uses: PaloAltoNetworks/prisma-cloud-scan@v1.6.7
          with:
            pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
            pcc_user: ${{ secrets.PCC_USER }}
            pcc_pass: ${{ secrets.PCC_PASS }}
            image_name:  ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
            sarif_file: prisma_results.sarif

        # Docker Bench Security
        - name: Clone Docker Bench Security
          run: |
            git clone https://github.com/docker/docker-bench-security.git
            cd docker-bench-security
            chmod +x docker-bench-security.sh

        - name: Run Docker Bench Security
          run: |
            cd docker-bench-security
            ./docker-bench-security.sh

        # Upload SARIF Results
        - name: Upload Trivy SARIF Results
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: trivy_results.sarif

        - name: Upload Anchore SARIF Results
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: anchore_results.sarif

        - name: Upload Orca SARIF Results
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: orca_results.sarif

        - name: Upload Prisma SARIF Results
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: prisma_results.sarif

  push:
    name: Push Docker Image to DockerHub v${{ needs.build.outputs.VERSION }}
    runs-on: ubuntu-latest
    needs: [build, test, security_scan]
    if: ${{ success() }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker Image
        run: |
          docker tag ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }} ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
          docker push ${{ vars.DOCKER_USERNAME }}/fastapi:${{ needs.build.outputs.VERSION }}
